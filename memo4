リベース
    変更を統合する際に履歴をきれいに整えるために使う
    今まではmergeで取り込んでいた

    git rebase ブランチ名
    ブランチの基点となるコミットを別のコミットへ移動


リベースとマージの違い
    ベースとなるコミットをrebaseする

    リベース  履歴が一直線
    マージ   履歴が枝分かれ

    git checkout feature
    git rebase master

    git checkout master
    git merge feature 
    ファストフォワード

ファストフォワード設定
    git config --global merge.ff false
    コメント表示
    別のブランチの作業をきちんと残すため

    git config --global merge.ff true
    ファストフォワード

    ファストフォワードするとどこまでがブランチで作業したか、masterかわからなくなる
    ブランチでの作業内容を必ずわかるようにしたい場合


リベースの注意点
    githubにプッシュしたコミットをrebaseしてはいけない
    
    git push -fは絶対にNG
    強制的にgithubを上書きしてpush
    これをするとgitの履歴が壊れる


リベースとマージどちらを使うか
    マージ
        コンフリクト解決が簡単
        マージコミットが多いと履歴が複雑化
    作業履歴を残したい場合マージ

    リベース
        履歴をきれいに保つ
        コンフリクト解決が面倒
            コミットそれぞれに解消が必要
    履歴を綺麗にしたい場合リベース

    おすすめ基本方針
    プッシュしていないローカルの変更にはリベース
    プッシュした後はマージ
    コンフリクトしそうならマージ
        チーム開発においてはメンバーの作業内容を把握
        把握が難しい場合は
        一回ローカルの変更をpush pull request コンフリクトの表示でてくる
        コンフリクトがあればマージ
    履歴を残したいならマージ


プルにはマージ型とリベース型がある
    マージ型 通常のマージ
    git pull リモート　ブランチ名
    git pull origin master
    マージコミットが残るため、マージした記録を残したい場合に使う 

    リベース型
    git pull --rebase リモート名　ブランチ名
    git pull --rebase origin master
    マージコミットが残らないGitHubの内容を所得したいだけの時はrebase

    プルをリベース型に設定する
    git config --global pull.rebase true

    masterブランチでgit pullするときだけrebase型にしたい時
    git config branch.master.rebase true

    --globalはpc全体の設定
    --globalを設定しないと今あるプロジェクトのみの設定になる