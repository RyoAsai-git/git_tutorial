リベース
    変更を統合する際に履歴をきれいに整えるために使う
    今まではmergeで取り込んでいた

    git rebase ブランチ名
    ブランチの基点となるコミットを別のコミットへ移動


リベースとマージの違い
    ベースとなるコミットをrebaseする

    リベース  履歴が一直線
    マージ   履歴が枝分かれ

    git checkout feature
    git rebase master

    git checkout master
    git merge feature 
    ファストフォワード

ファストフォワード設定
    git config --global merge.ff false
    コメント表示
    別のブランチの作業をきちんと残すため

    git config --global merge.ff true
    ファストフォワード

    ファストフォワードするとどこまでがブランチで作業したか、masterかわからなくなる
    ブランチでの作業内容を必ずわかるようにしたい場合


リベースの注意点
    githubにプッシュしたコミットをrebaseしてはいけない
    
    git push -fは絶対にNG
    強制的にgithubを上書きしてpush
    これをするとgitの履歴が壊れる


リベースとマージどちらを使うか
    マージ
        コンフリクト解決が簡単
        マージコミットが多いと履歴が複雑化
    作業履歴を残したい場合マージ

    リベース
        履歴をきれいに保つ
        コンフリクト解決が面倒
            コミットそれぞれに解消が必要
    履歴を綺麗にしたい場合リベース

    おすすめ基本方針
    プッシュしていないローカルの変更にはリベース
    プッシュした後はマージ
    コンフリクトしそうならマージ
        チーム開発においてはメンバーの作業内容を把握
        把握が難しい場合は
        一回ローカルの変更をpush pull request コンフリクトの表示でてくる
        コンフリクトがあればマージ
    履歴を残したいならマージ


プルにはマージ型とリベース型がある
    マージ型 通常のマージ
    git pull リモート　ブランチ名
    git pull origin master
    マージコミットが残るため、マージした記録を残したい場合に使う 

    リベース型
    git pull --rebase リモート名　ブランチ名
    git pull --rebase origin master
    マージコミットが残らないGitHubの内容を所得したいだけの時はrebase

    プルをリベース型に設定する
    git config --global pull.rebase true

    masterブランチでgit pullするときだけrebase型にしたい時
    git config branch.master.rebase true

    --globalはpc全体の設定
    --globalを設定しないと今あるプロジェクトのみの設定になる


リベースで履歴を変更
    pushする前

    直前のコミットをやり直す
    git commit --amend 
    リモートにpushする前

    複数のコミットをやり直す
    git rebase -i コミットid
    git rebase -i HEAD~3
    直前の3つのコミット

    -iはinteractiveの略 対話的リベースと言ってやり取りしながら履歴を変更

    このように表示
    pick コミットid ヘッダー修正
    pick コミットid ファイル追加
    pick コミットid README修正

    やり直したいcommitをeditにする
    edit コミットid ヘッダー修正
    pick           ファイル追加 
    pick           README修正

    やり直したら実行
    git commit --amend

    次のコミットへ進む
    git rebase --continue


コミットをまとめる
    git rebase -i HEAD~3

    pickをsquash

    全てsquashにするとerror: cannot 'squash' without a previous commitとなる
    エラー


コミットを分割する
    git rebase -i HEAD~3

    pickをedit

    git reset HEAD^ 
    edit記載のコミットをステージングする前の状態へ戻す

    git add ファイル名
    git commit -m "メッセージ"
    でそれぞれコミットする


リモートにpush済みコミットをリベースしてしまった時
    hint: Updates were rejected because the tip of your current branch is behind
    hint: its remote counterpart. Integrate the remote changes (e.g.
    hint: 'git pull ...') before pushing again.
    hint: See the 'Note about fast-forwards' in 'git push --help' for details.
    
    git rebase -i HEAD~5
    対象のコミットを消す

    git pull origin master


タグ
    コミットを参照しやすくする
    リリースポイントに使う 名前をつける 
    バグが起きた時の切り戻しをしやすくする

    git tag 
    git tag -l "202005"   2020年5月の意味

    注釈付きタグ annotated
        基本的コッチ
        情報がしっかりしている

    軽量版タグ lightweight
        簡潔


注釈タグ作成
    git tag -a タグ名 -m メッセージ
    git tag -a 20170520_01 -m "version 20200520_01"

    -aをつけると注釈付きタグを作成 annotated

軽量タグ
    git tag タグ名
    git tag 20170520_01

    後からタグ付
    git tag タグ名 コミット名
    git tag 20170520_01 8a6cbc4

タグのデータを表示する
    git show タグ名
    git show 20170520_01

    タグ付けした人の情報
    タグ付けした人の日時
    注釈メッセージ
    コミット

    git tag
    タグ一覧表示